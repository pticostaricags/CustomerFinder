// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using Newtonsoft.Json.Linq;

namespace CustomerFinderCognitiveServices.Models
{
    public partial class DetectedLanguageV2
    {
        private string _iso6391Name;
        
        /// <summary>
        /// Optional. A two letter representation of the detected language
        /// according to the ISO 639-1 standard (e.g. en, fr).
        /// </summary>
        public string Iso6391Name
        {
            get { return this._iso6391Name; }
            set { this._iso6391Name = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. Long name of a detected language (e.g. English, French).
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private double? _score;
        
        /// <summary>
        /// Optional. A confidence score between 0 and 1. Scores close to 1
        /// indicate 100% certainty that the identified language is true.
        /// </summary>
        public double? Score
        {
            get { return this._score; }
            set { this._score = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DetectedLanguageV2 class.
        /// </summary>
        public DetectedLanguageV2()
        {
        }
        
        /// <summary>
        /// Deserialize the object
        /// </summary>
        public virtual void DeserializeJson(JToken inputObject)
        {
            if (inputObject != null && inputObject.Type != JTokenType.Null)
            {
                JToken iso6391NameValue = inputObject["iso6391Name"];
                if (iso6391NameValue != null && iso6391NameValue.Type != JTokenType.Null)
                {
                    this.Iso6391Name = ((string)iso6391NameValue);
                }
                JToken nameValue = inputObject["name"];
                if (nameValue != null && nameValue.Type != JTokenType.Null)
                {
                    this.Name = ((string)nameValue);
                }
                JToken scoreValue = inputObject["score"];
                if (scoreValue != null && scoreValue.Type != JTokenType.Null)
                {
                    this.Score = ((double)scoreValue);
                }
            }
        }
    }
}
