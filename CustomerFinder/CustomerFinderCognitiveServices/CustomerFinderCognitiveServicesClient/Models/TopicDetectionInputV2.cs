// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using CustomerFinderCognitiveServices.Models;
using Microsoft.Rest;
using Newtonsoft.Json.Linq;

namespace CustomerFinderCognitiveServices.Models
{
    public partial class TopicDetectionInputV2
    {
        private IList<InputV2> _documents;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public IList<InputV2> Documents
        {
            get { return this._documents; }
            set { this._documents = value; }
        }
        
        private IList<string> _stopWords;
        
        /// <summary>
        /// Optional. List of words to ignore from all documents during
        /// pre-processing.
        /// </summary>
        public IList<string> StopWords
        {
            get { return this._stopWords; }
            set { this._stopWords = value; }
        }
        
        private IList<string> _topicsToExclude;
        
        /// <summary>
        /// Optional. List of topics to omit from the response.
        /// </summary>
        public IList<string> TopicsToExclude
        {
            get { return this._topicsToExclude; }
            set { this._topicsToExclude = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TopicDetectionInputV2 class.
        /// </summary>
        public TopicDetectionInputV2()
        {
            this.Documents = new LazyList<InputV2>();
            this.StopWords = new LazyList<string>();
            this.TopicsToExclude = new LazyList<string>();
        }
        
        /// <summary>
        /// Serialize the object
        /// </summary>
        /// <returns>
        /// Returns the json model for the type TopicDetectionInputV2
        /// </returns>
        public virtual JToken SerializeJson(JToken outputObject)
        {
            if (outputObject == null)
            {
                outputObject = new JObject();
            }
            JArray documentsSequence = null;
            if (this.Documents != null)
            {
                if (this.Documents is ILazyCollection<InputV2> == false || ((ILazyCollection<InputV2>)this.Documents).IsInitialized)
                {
                    documentsSequence = new JArray();
                    outputObject["documents"] = documentsSequence;
                    foreach (InputV2 documentsItem in this.Documents)
                    {
                        if (documentsItem != null)
                        {
                            documentsSequence.Add(documentsItem.SerializeJson(null));
                        }
                    }
                }
            }
            JArray stopWordsSequence = null;
            if (this.StopWords != null)
            {
                if (this.StopWords is ILazyCollection<string> == false || ((ILazyCollection<string>)this.StopWords).IsInitialized)
                {
                    stopWordsSequence = new JArray();
                    outputObject["stopWords"] = stopWordsSequence;
                    foreach (string stopWordsItem in this.StopWords)
                    {
                        if (stopWordsItem != null)
                        {
                            stopWordsSequence.Add(stopWordsItem);
                        }
                    }
                }
            }
            JArray topicsToExcludeSequence = null;
            if (this.TopicsToExclude != null)
            {
                if (this.TopicsToExclude is ILazyCollection<string> == false || ((ILazyCollection<string>)this.TopicsToExclude).IsInitialized)
                {
                    topicsToExcludeSequence = new JArray();
                    outputObject["topicsToExclude"] = topicsToExcludeSequence;
                    foreach (string topicsToExcludeItem in this.TopicsToExclude)
                    {
                        if (topicsToExcludeItem != null)
                        {
                            topicsToExcludeSequence.Add(topicsToExcludeItem);
                        }
                    }
                }
            }
            return outputObject;
        }
    }
}
